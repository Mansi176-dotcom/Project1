# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1idhu_OUb_HDhz6_DQyOy5-OfXlI_xMCx
"""



"""importing all the dependencies

"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score



"""Data collection and Preprocessing"""

#loading a dataset to a pandas dataframe
sonar_data=pd.read_csv('/content/Copy of sonar data.csv',header=None)

sonar_data.head()

#no. of rows and columns
sonar_data.shape

sonar_data.describe() #used for describing the statistical measures of the data

sonar_data[60].value_counts() #almost equal no. of rocks and mines



"""M-->MINE
R-->ROCK
"""

sonar_data.groupby(60).mean()

#seperating data and labels

x=sonar_data.drop(columns=60,axis=1)
y=sonar_data[60]

print(x)
print(y)



"""Training and Test Data"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,stratify=y,random_state=1)

print(x.shape,x_train.shape,x_test.shape)

print(x_train)
print(y_train)

"""Model Training --> Logistic regression"""

model=LogisticRegression()

#training the logistic regression model with training data
model.fit(x_train,y_train)



"""Model Evaluation"""

#accuracy on training data
x_train_prediction=model.predict(x_train)
training_data_accuracy=accuracy_score(x_train_prediction,y_train)

print("accuracy on training data: ",training_data_accuracy)
#accuracy greater than 70 means our model is predicting greatly

#accuracy on test data
x_test_prediction=model.predict(x_test)
test_data_accuracy=accuracy_score(x_test_prediction,y_test)

print("accuracy on test data: ",test_data_accuracy)



"""Making a Predictive System"""

input_data=()

#changing the input_data to a numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshaping the numpy array as we are predicting for one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
prediction=model.predict(input_data_reshaped)
print(prediction)
if(prediction[0]=='R'):
  print("It's a Rock")
else:
  print("it's a mine")

